---
apiVersion: v1
kind: Namespace
metadata:
  name: prometheus
---
apiVersion: v1
kind: PersistentVolume
namespace: prometheus
metadata:
  name: prometheus-pv
spec:
  capacity:
    storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Recycle
  storageClassName: local-path
  hostPath:
    path: /mnt/data/prometheus
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: prometheus
spec:
  resources:
    requests:
      storage: 5Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      volumes:
        - name: prometheus-data
          persistentVolumeClaim:
            claimName: prometheus-pvc
      containers:
      - name: prometheus
        image: prom/prometheus
        volumeMounts:
          - name: prometheus-data
            mountPath: /var/lib/grafana
        resources:
          limits:
            memory: "2Gi"
            cpu: "800m"
        ports:
        - containerPort: 9090
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: prometheus
spec:
  selector:
    app: prometheus
  ports:
  - name: http
    port: 9090
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    name: prometheus
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-http
    ingress.kubernetes.io/auth-type: "basic"
    ingress.kubernetes.io/auth-secret: "prometheus-auth"
spec:
  tls:
    - secretName: prometheus-tls
      hosts:
        - prom.jank.engineer
  rules:
  - host: prom.jank.engineer
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: prometheus
            port: 
              name: http
